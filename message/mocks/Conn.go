// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import nats "github.com/nats-io/go-nats"
import stan "github.com/nats-io/go-nats-streaming"

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m Conn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NatsConn provides a mock function with given fields:
func (_m Conn) NatsConn() *nats.Conn {
	ret := _m.Called()

	var r0 *nats.Conn
	if rf, ok := ret.Get(0).(func() *nats.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Conn)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: subject, data
func (_m Conn) Publish(subject string, data []byte) error {
	ret := _m.Called(subject, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(subject, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishAsync provides a mock function with given fields: subject, data, ah
func (_m Conn) PublishAsync(subject string, data []byte, ah stan.AckHandler) (string, error) {
	ret := _m.Called(subject, data, ah)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte, stan.AckHandler) string); ok {
		r0 = rf(subject, data, ah)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, stan.AckHandler) error); ok {
		r1 = rf(subject, data, ah)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueSubscribe provides a mock function with given fields: subject, qgroup, cb, opts
func (_m Conn) QueueSubscribe(subject string, qgroup string, cb stan.MsgHandler, opts ...stan.SubscriptionOption) (stan.Subscription, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, qgroup, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 stan.Subscription
	if rf, ok := ret.Get(0).(func(string, string, stan.MsgHandler, ...stan.SubscriptionOption) stan.Subscription); ok {
		r0 = rf(subject, qgroup, cb, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stan.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, stan.MsgHandler, ...stan.SubscriptionOption) error); ok {
		r1 = rf(subject, qgroup, cb, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: subject, cb, opts
func (_m Conn) Subscribe(subject string, cb stan.MsgHandler, opts ...stan.SubscriptionOption) (stan.Subscription, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 stan.Subscription
	if rf, ok := ret.Get(0).(func(string, stan.MsgHandler, ...stan.SubscriptionOption) stan.Subscription); ok {
		r0 = rf(subject, cb, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stan.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, stan.MsgHandler, ...stan.SubscriptionOption) error); ok {
		r1 = rf(subject, cb, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
