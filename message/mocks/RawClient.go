// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import message "github.com/amagimedia/judo/message"
import mock "github.com/stretchr/testify/mock"
import redis "github.com/go-redis/redis"

// RawClient is an autogenerated mock type for the RawClient type
type RawClient struct {
	mock.Mock
}

// Channel provides a mock function with given fields:
func (_m *RawClient) Channel() <-chan *redis.Message {
	ret := _m.Called()

	var r0 <-chan *redis.Message
	if rf, ok := ret.Get(0).(func() <-chan *redis.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *RawClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *RawClient) Publish(_a0 string, _a1 interface{}) *redis.IntCmd {
	ret := _m.Called(_a0, _a1)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(string, interface{}) *redis.IntCmd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0
func (_m *RawClient) Subscribe(_a0 ...string) message.RawClient {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 message.RawClient
	if rf, ok := ret.Get(0).(func(...string) message.RawClient); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(message.RawClient)
		}
	}

	return r0
}
