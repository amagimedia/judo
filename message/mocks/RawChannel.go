// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import amqp "github.com/streadway/amqp"

import mock "github.com/stretchr/testify/mock"

// RawChannel is an autogenerated mock type for the RawChannel type
type RawChannel struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m RawChannel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m RawChannel) Consume(_a0 string, _a1 string, _a2 bool, _a3 bool, _a4 bool, _a5 bool, _a6 interface{}) (<-chan amqp.Delivery, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, interface{}) <-chan amqp.Delivery); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool, bool, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeDeclare provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m RawChannel) ExchangeDeclare(_a0 string, _a1 string, _a2 bool, _a3 bool, _a4 bool, _a5 bool, _a6 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m RawChannel) Publish(_a0 string, _a1 string, _a2 bool, _a3 bool, _a4 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Qos provides a mock function with given fields: _a0, _a1, _a2
func (_m RawChannel) Qos(_a0 int, _a1 int, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueBind provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m RawChannel) QueueBind(_a0 string, _a1 string, _a2 string, _a3 bool, _a4 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m RawChannel) QueueDeclare(_a0 string, _a1 bool, _a2 bool, _a3 bool, _a4 bool, _a5 interface{}) (amqp.Queue, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 amqp.Queue
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, interface{}) amqp.Queue); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Get(0).(amqp.Queue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, bool, bool, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
